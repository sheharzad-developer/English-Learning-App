version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: english_learning_db
    environment:
      POSTGRES_DB: english_learning_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - english_learning_network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: english_learning_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - english_learning_network

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: english_learning_backend
    environment:
      - DEBUG=0
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/english_learning_db
      - REDIS_URL=redis://redis:6379/0
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend
      - SECRET_KEY=your-secret-key-here
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:80
    volumes:
      - media_files:/app/media
      - static_files:/app/staticfiles
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - english_learning_network
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn --bind 0.0.0.0:8000 --workers 3 english_learning_app.wsgi:application"

  # React Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: english_learning_frontend
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - static_files:/usr/share/nginx/html/static
    networks:
      - english_learning_network

  # Nginx Load Balancer (optional for production)
  nginx:
    image: nginx:alpine
    container_name: english_learning_nginx
    ports:
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - static_files:/var/www/static
      - media_files:/var/www/media
    depends_on:
      - frontend
      - backend
    networks:
      - english_learning_network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  media_files:
    driver: local
  static_files:
    driver: local

networks:
  english_learning_network:
    driver: bridge
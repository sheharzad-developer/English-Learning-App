# Generated by Django 5.2.1 on 2025-08-19 17:49

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('icon', models.URLField(blank=True, max_length=500)),
                ('criteria', models.JSONField(help_text='Conditions to earn badge')),
                ('points_reward', models.IntegerField(default=0)),
                ('rarity', models.CharField(choices=[('common', 'Common'), ('rare', 'Rare'), ('epic', 'Epic'), ('legendary', 'Legendary')], default='common', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(blank=True, max_length=100)),
                ('order_index', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'ordering': ['order_index', 'name'],
            },
        ),
        migrations.CreateModel(
            name='SkillLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
                ('order_index', models.IntegerField(unique=True)),
                ('description', models.TextField(blank=True)),
                ('min_points', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['order_index'],
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('content', models.JSONField(default=dict, help_text='Rich content with text, images, videos')),
                ('video_url', models.URLField(blank=True, max_length=500)),
                ('audio_url', models.URLField(blank=True, max_length=500)),
                ('thumbnail', models.URLField(blank=True, max_length=500)),
                ('duration', models.IntegerField(blank=True, help_text='Duration in minutes', null=True)),
                ('points', models.IntegerField(default=10)),
                ('order_index', models.IntegerField(default=0)),
                ('is_published', models.BooleanField(default=False)),
                ('prerequisites', models.JSONField(default=list, help_text='Array of lesson IDs required before this lesson')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='learning.category')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('skill_level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='learning.skilllevel')),
            ],
            options={
                'ordering': ['category', 'skill_level', 'order_index'],
            },
        ),
        migrations.CreateModel(
            name='Exercise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('type', models.CharField(choices=[('mcq', 'Multiple Choice Question'), ('fill_blank', 'Fill in the Blank'), ('matching', 'Matching'), ('essay', 'Essay Writing'), ('speaking', 'Speaking Practice'), ('listening', 'Listening Comprehension'), ('reading', 'Reading Comprehension'), ('drag_drop', 'Drag and Drop')], max_length=50)),
                ('content', models.JSONField(default=dict, help_text='Question content, media URLs, instructions')),
                ('options', models.JSONField(default=list, help_text='For MCQ, matching options')),
                ('correct_answer', models.JSONField(default=dict, help_text='Correct answers/patterns')),
                ('points', models.IntegerField(default=5)),
                ('difficulty', models.IntegerField(default=1, help_text='Difficulty scale 1-5', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('order_index', models.IntegerField(default=0)),
                ('time_limit', models.IntegerField(blank=True, help_text='Time limit in seconds', null=True)),
                ('hints', models.JSONField(default=list, help_text='Array of hints')),
                ('explanation', models.TextField(blank=True, help_text='Explanation for correct answer')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exercises', to='learning.lesson')),
            ],
            options={
                'ordering': ['lesson', 'order_index'],
            },
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.JSONField(help_text="User's answer")),
                ('score', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('is_correct', models.BooleanField(default=False)),
                ('feedback', models.TextField(blank=True)),
                ('time_taken', models.IntegerField(blank=True, help_text='Time taken in seconds', null=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('exercise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='learning.exercise')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SpeechSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('audio_file', models.FileField(blank=True, null=True, upload_to='speech_submissions/')),
                ('transcript', models.TextField(blank=True)),
                ('pronunciation_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('fluency_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('accuracy_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('feedback_json', models.JSONField(default=dict, help_text='Detailed speech analysis')),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('processing_status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('submission', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='speech_details', to='learning.submission')),
            ],
        ),
        migrations.CreateModel(
            name='EssaySubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('essay_text', models.TextField()),
                ('grammar_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('spelling_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('vocabulary_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('structure_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('feedback_json', models.JSONField(default=dict, help_text='Detailed feedback from grammar API')),
                ('word_count', models.IntegerField(blank=True, null=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('processing_status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('submission', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='essay_details', to='learning.submission')),
            ],
        ),
        migrations.CreateModel(
            name='UserBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='earned_by', to='learning.badge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='badges', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserPoints',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField()),
                ('source', models.CharField(choices=[('lesson_completion', 'Lesson Completion'), ('exercise_correct', 'Exercise Correct Answer'), ('daily_streak', 'Daily Streak'), ('badge_earned', 'Badge Earned'), ('perfect_score', 'Perfect Score'), ('first_attempt', 'First Attempt Success')], max_length=100)),
                ('source_id', models.IntegerField(blank=True, help_text='ID of the source (lesson_id, exercise_id, etc.)', null=True)),
                ('description', models.TextField(blank=True)),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='points', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('completed', models.BooleanField(default=False)),
                ('score', models.DecimalField(decimal_places=2, default=0.0, help_text='Percentage score', max_digits=5)),
                ('attempts', models.IntegerField(default=0)),
                ('time_spent', models.IntegerField(default=0, help_text='Time spent in seconds')),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_progress', to='learning.lesson')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lesson_progress', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserStreak',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_streak', models.IntegerField(default=0)),
                ('longest_streak', models.IntegerField(default=0)),
                ('last_activity_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='streak', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_points', models.IntegerField(default=0)),
                ('lessons_completed', models.IntegerField(default=0)),
                ('badges_earned', models.IntegerField(default=0)),
                ('current_streak', models.IntegerField(default=0)),
                ('rank', models.IntegerField(default=0)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='leaderboard_entry', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-total_points', '-lessons_completed'],
                'indexes': [models.Index(fields=['rank'], name='learning_le_rank_f71430_idx'), models.Index(fields=['-total_points'], name='learning_le_total_p_0f5c43_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='exercise',
            index=models.Index(fields=['lesson', 'type'], name='learning_ex_lesson__e1394f_idx'),
        ),
        migrations.AddIndex(
            model_name='lesson',
            index=models.Index(fields=['category', 'skill_level'], name='learning_le_categor_18a2d1_idx'),
        ),
        migrations.AddIndex(
            model_name='lesson',
            index=models.Index(fields=['is_published'], name='learning_le_is_publ_655736_idx'),
        ),
        migrations.AddIndex(
            model_name='submission',
            index=models.Index(fields=['user', 'exercise'], name='learning_su_user_id_5029bb_idx'),
        ),
        migrations.AddIndex(
            model_name='submission',
            index=models.Index(fields=['submitted_at'], name='learning_su_submitt_033831_idx'),
        ),
        migrations.AddIndex(
            model_name='userbadge',
            index=models.Index(fields=['user', 'earned_at'], name='learning_us_user_id_2940e8_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userbadge',
            unique_together={('user', 'badge')},
        ),
        migrations.AddIndex(
            model_name='userpoints',
            index=models.Index(fields=['user', 'earned_at'], name='learning_us_user_id_697c22_idx'),
        ),
        migrations.AddIndex(
            model_name='userpoints',
            index=models.Index(fields=['source'], name='learning_us_source_aee532_idx'),
        ),
        migrations.AddIndex(
            model_name='userprogress',
            index=models.Index(fields=['user', 'completed'], name='learning_us_user_id_817668_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userprogress',
            unique_together={('user', 'lesson')},
        ),
    ]
